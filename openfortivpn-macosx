#!/bin/bash
# OpenFortiVPN macOS Main Control Script
# Manages OpenFortiVPN connections

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Source common functions
source "/usr/local/lib/openfortivpn-macosx/functions.sh"

# Load configuration
load_config

# ============================================================================
# VPN Control Functions
# ============================================================================

# Start VPN connection
start_vpn() {    
    
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if is_process_running "$pid"; then
            print_warning "VPN is already running with PID $pid"
            exit 1
        else
            print_info "VPN process not found, but PID file exists. Cleaning up..."
            rm -f "$PID_FILE"
        fi
    fi
    
    # check for any running $OPENFORTIVPN_BIN processes
    rogue_processes=$(pgrep -f "$OPENFORTIVPN_BIN")
    if [[ -n "$rogue_processes" ]]; then
        print_warning "Killing rogue openfortivpn processes"
        for i in $rogue_processes; do 
            echo -e "${YELLOW}  • Killing PID $i${NC}"
            ps -p $i
            kill -TERM $i
        done
    fi

    # Generate unique session ID
    local session_id=$(generate_session_id)
    mark_session_start "$session_id"
    
    print_header "Starting VPN connection to $VPN_SERVER..."
    print_info "Session ID: $session_id"
    
    # Build the command
    cmd="nohup stdbuf -oL $OPENFORTIVPN_BIN $VPN_SERVER:$VPN_PORT"
    for option in "${OPENFORTIVPN_OPTIONS[@]}"; do
        cmd+=" $option"
    done
    cmd+=" --pppd-ipparam=$session_id"
    cmd+=" 2>&1 | stdbuf -oL grep -v 'gateway ---> pppd\|pppd ---> gateway\|gtw:\|pppd:' | stdbuf -oL sed '/^$/d' >> \"$LOG_FILE\" &"

    # Execute
    sh -c "$cmd"

    # Find the actual openfortivpn PID
    local vpn_pid=$(pgrep -f "$OPENFORTIVPN_BIN" | head -1)
    echo $vpn_pid > "$PID_FILE"

    # Watch for SAML authentication URL and open the browser (if --saml-login is in cmd)
    if [[ $cmd == *"--saml-login"* ]]; then
        print_info "Watching for SAML authentication URL..."
        local timeout_counter=0
        while [[ $timeout_counter -lt $SAML_TIMEOUT ]]; do
            if tail -50 "$LOG_FILE" 2>/dev/null | grep -q "Authenticate at"; then
                local found_url=$(tail -50 "$LOG_FILE" | grep "Authenticate at" | tail -1 | sed "s/.*Authenticate at '\(.*\)'/\1/")
                if [[ -n "$found_url" ]]; then
                    print_success "Opening SAML URL..."
                    sudo -u "$BROWSER_USER" open "$found_url"
                    break
                fi
            fi
            sleep 1
            ((timeout_counter++))
        done

        if [[ $timeout_counter -eq $SAML_TIMEOUT ]]; then
            print_warning "Timeout waiting for SAML URL. Check $LOG_FILE for details."
        fi
    fi

    # if pid exists
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if is_process_running "$pid"; then
            print_success "VPN started with PID $pid"
            print_info "Logs available at: $LOG_FILE"
        else
            print_warning "VPN started with PID $pid, but process not found"
            print_info "Logs available at: $LOG_FILE"
        fi
    else
        print_warning "VPN started with PID $vpn_pid, but PID file not found"
        print_info "Logs available at: $LOG_FILE"
    fi
}

# Stop VPN connection
stop_vpn() {
    if [[ ! -f "$PID_FILE" ]]; then
        print_warning "VPN is not running (no PID file found)"
        # Clean up any stray processes
        if killall openfortivpn > /dev/null 2>&1; then
            print_info "Killed stray openfortivpn processes"
        fi
        exit 1
    fi
    
    local pid=$(cat "$PID_FILE")
    print_header "Stopping VPN connection (PID: $pid)..."
    
    # Send SIGTERM for graceful shutdown (this should trigger ip-down)
    if is_process_running "$pid"; then
        print_info "Sending termination signal to VPN process..."
        kill -TERM "$pid" 2>/dev/null
        
        # Wait for process to terminate gracefully
        print_status "Waiting for graceful shutdown..."
        local count=0
        while [[ $count -lt 15 ]] && is_process_running "$pid"; do
            sleep 1
            ((count++))
            echo -n -e "${CYAN}.${NC}"
        done
        echo
        print_success "openfortivpn stopped"
    fi
    
    # Clean up any remaining openfortivpn processes
    if killall openfortivpn > /dev/null 2>&1; then
        print_info "Killed remaining openfortivpn processes"
    fi
    
    # Clean up files
    cleanup_temp_files
    
    print_success "VPN stopped"
}

# Show VPN status
show_status() {
    echo -e "${PURPLE}═══ VPN Connection Status ═══${NC}"
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if is_process_running "$pid"; then
            print_success "VPN Process: RUNNING (PID $pid)"
            
            # Check PPP interface
            if ifconfig ppp0 2>/dev/null | grep -q "inet "; then
                local ppp_ip=$(ifconfig ppp0 | grep "inet " | awk '{print $2}')
                print_success "PPP Interface: UP ($ppp_ip)"
            else
                print_warning "PPP Interface: DOWN"
            fi
        else
            print_warning "VPN Process: NOT RUNNING (stale PID file)"
            rm -f "$PID_FILE"
        fi
    else
        print_error "VPN Process: NOT RUNNING"
    fi
    
    # Show current routing table
    echo
    echo -e "${PURPLE}═══ Current Routes ═══${NC}"
    print_info "Default route:"
    default_route=$(netstat -rn | awk '/^default/{found=1} found{print} found && /^$/{exit}' | grep default | head -n 1)
    if [[ -n "$default_route" ]]; then
        echo -e "${CYAN}  $default_route${NC}"
    else
        print_warning "No default route found"
    fi
    echo

    vpn_routes=$(netstat -rn | grep ppp | head -10)
    if [[ -n "$vpn_routes" ]]; then
        print_info "VPN routes:"
        echo -e "${CYAN}$vpn_routes${NC}"
        echo
    fi
    
    # Show configuration location
    echo -e "${PURPLE}═══ Configuration ═══${NC}"
    [[ -f "$CONFIG_PATH" ]] && print_success "${CYAN}Configuration file:${NC} $CONFIG_PATH" || print_warning "!! WARNING !!\nNo configuration file found at /usr/local/etc/openfortivpn-macosx/config.sh, using defaults !!\n!! WARNING !!\n"
    echo -e "${BLUE}Log path:${NC} $LOG_FILE"
    echo -e "${BLUE}Routes path:${NC} $ROUTES_FILE"
    echo -e "${BLUE}VPN server:${NC} $VPN_SERVER:$VPN_PORT"
}

# ============================================================================
# Main Script Logic
# ============================================================================

case "$1" in
    start)
        start_vpn
        ;;
        
    stop)
        stop_vpn
        ;;
        
    restart)
        print_header "Restarting VPN connection..."
        stop_vpn
        sleep 2
        start_vpn
        ;;
        
    status)
        show_status
        ;;
        
    logs)
        if [[ -f "$LOG_FILE" ]]; then
            print_info "Following log file: $LOG_FILE"
            print_warning "Press Ctrl+C to exit"
            echo
            tail -f "$LOG_FILE"
        else
            print_error "No log file found at $LOG_FILE"
        fi
        ;;
        
    *)
        echo -e "${BLUE}OpenFortiVPN macOS Control Script${NC}"
        echo
        [[ -f "$CONFIG_PATH" ]] && print_success "${CYAN}Configuration file:${NC} $CONFIG_PATH" || print_warning "!! WARNING !!\nNo configuration file found at /usr/local/etc/openfortivpn-macosx/config.sh, using defaults !!\n!! WARNING !!\n"
        echo
        echo -e "${YELLOW}Usage:${NC} $0 [start|stop|restart|status|logs]"
        echo
        echo -e "${CYAN}Commands:${NC}"
        echo -e "  ${GREEN}start${NC}    - Start VPN connection"
        echo -e "  ${RED}stop${NC}     - Stop VPN connection"
        echo -e "  ${YELLOW}restart${NC}  - Restart VPN connection"
        echo -e "  ${BLUE}status${NC}   - Show detailed VPN status"
        echo -e "  ${PURPLE}logs${NC}     - Tail the VPN log file"
        echo
        ;;
esac